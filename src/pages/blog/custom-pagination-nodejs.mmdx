---
layout: "../../layouts/BlogPost.astro"
title: "A custom pagination in NodeJS"
description: "Building a solution to a commonly occurring problem"
pubDate: "Feb 25 2023"
heroImage: "/placeholder-hero.jpg"
---

Pagination is a common requirement in web development. It enables users to navigate through large data sets by dividing them into smaller, more manageable pages. While there are many pagination libraries available, building a custom solution can be beneficial in some cases. In this blog post, we will explore how to build a custom pagination in NodeJS.

To get started, we define a PaginationManager class that takes an array of items as its constructor argument. This class serves as the main entry point for pagination operations on the array of items.

```
export class PaginationManager {
  items: Array<any>;

  constructor(items: Array<any>) {
    this.items = items;
  }
}
```

Next, we define some helper methods to sort the items in the array. In this example, we have implemented three sorting methods - `newestFirst()`, `oldestFirst()`, and `cheapestFirst()`. These methods sort the items based on the listed date and price.

```
newestFirst() {
  return this.items.sort(function (a, b) {
    return (b.listedDate ?? b.listDate) - (a.listedDate ?? a.listDate);
  });
}
oldestFirst() {
  return this.items.sort(function (a, b) {
    return (a.listedDate ?? a.listDate) - (b.listedDate ?? b.listDate);
  });
}
cheapestFirst() {
  return this.items.sort(function (a, b) {
    return (a.list_price ?? a.price) - (b.list_price ?? b.price);
  });
}
```

Finally, we define the `paginate()` method. This method takes three arguments - `page`, `items`, and `delta`. `page` is the current page number, `items` is the array of items to paginate, and `delta` is the number of items to display on each page. It returns a `PaginationResults` object that contains information about the paginated data set.

```
paginate(page = 1, items: Array<any>, delta = 24): PaginationResults {
  const data = {
    total: items.length,
    totalPages: 0,
    page,
    hasNextPage: false,
    hasPrevPage: false,
    next: null,
    prev: null,
    docs: [],
  };

  data.totalPages = Math.ceil(data.total / delta);

  data.hasPrevPage = data.page > 1;
  data.hasNextPage = data.page < data.totalPages;

  data.next = data.hasNextPage ? data.page + +1 : null;
  data.prev = data.hasPrevPage ? data.page - 1 : null;

  data.docs = items.slice((page - 1) * delta, (page - 1) * delta + delta);

  return data;
}
```

In the example code, we use the `PaginationManager` class to paginate an array of NFTs. We filter the NFTs based on a search query and then sort them based on the user's selected sorting option. Finally, we use the `paginate()` method to display the paginated results.

```
const paginationManager = new PaginationManager(
  nfts.filter((nft) => searchResults.includes(nft.id))
);

const results = paginationManager.paginate(
  Number((page as string) ?? 1),
  sort === "1"
    ? paginationManager.cheapestFirst()
    : sort === "2"
    ? paginationManager.expensiveFirst()
    : paginationManager.newestFirst()
);
```

In conclusion, building a custom pagination solution in NodeJS can be a useful and rewarding exercise. By using a PaginationManager class and helper methods to sort the data, we can create a flexible and reusable pagination solution that can be customized to fit a wide range of use cases.
